(()=>{"use strict";class PluginParam{constructor(parameter,needParse=true){if(needParse){parameter=JSON.parse(JSON.stringify(parameter,this._paramReplacer))}this.setup(parameter)}setup(parameter){this._parameter=parameter;for(let paramName in parameter){if(!parameter.hasOwnProperty(paramName)){continue}const subParam=parameter[paramName];if(this._isStructArray(subParam)){subParam.forEach(((subParamItem,index)=>{subParam[index]=new PluginParam(subParamItem,false)}))}else if(this._isStruct(subParam)){parameter[paramName]=new PluginParam(subParam,false)}this._createAccessor(paramName)}}_createAccessor(paramName){Object.defineProperty(this,paramName,{get(){return this._convert(this._param(paramName),paramName)},set(value){this._parameter[paramName]=value},configurable:true})}_convert(param,paramName){if(this._isStruct(param)||this._isStructArray(param)){return param}else if(Array.isArray(param)){return param.map((paramItem=>this._convert(paramItem,paramName)))}if(!this._findTextParamSuffixList().some((regExp=>paramName.match(regExp)))){return PluginManagerEx.convertVariables(param)}else{return String(param)}}_findTextParamSuffixList(){return[/text$/gi,/name$/gi,/desc$/gi,/note$/gi,/script$/gi]}_isStructArray(param){return Array.isArray(param)&&(param.length===0||this._isStruct(param))}_isStruct(param){return Object.prototype.toString.call(param)==="[object Object]"}_param(name){return this._parameter[name]}_paramReplacer(key,value){if(value==="null"){return value}if(value[0]==='"'&&value[value.length-1]==='"'){return value}try{return JSON.parse(value)}catch(e){return value}}}class PluginManagerEx{static convertVariables(text,data=null){if(text!==String(text)){return text}text=this.convertEscapeCharacters(text,data);if(text==="true"){return true}else if(text==="false"){return false}else if(Number(text)===parseFloat(text)){return parseFloat(text)}else{return text}}static convertEscapeCharacters(text,data=null){text=TextConverter.convertEscapeCharactersBase(text,data);text=this.convertEscapeCharactersEx(text,data);text=TextConverter.convertEscapeCharactersBase(text,data);return text}static convertEscapeCharactersEx(text,data=null){text=text.replace(/\x1bS\[(.+)]/gi,((_,p1)=>$gameSwitches?$gameSwitches.value(parseInt(p1)):""));const key=this._selfSwitchKey;if(!key){return text}text=text.replace(/\x1bSS\[(.+)]/gi,((_,p1)=>{key[2]=p1;return $gameSelfSwitches?$gameSelfSwitches.value(key):""}));return text}static createParameter(currentScript){const paramText=PluginManager.parameters(this.findPluginName(currentScript));return new PluginParam(paramText)}static createCommandArgs(args){const hasObject=Object.keys(args).some((key=>args[key].match(/^[\[{].*[}\]]$/)));if(hasObject){return new PluginParam(args)}const newArgs={};Object.keys(args).forEach((key=>{newArgs[key]=this.convertVariables(args[key])}));return newArgs}static findMetaValue(object,nameList){if(!Array.isArray(nameList)){nameList=[nameList]}const meta=this.findMetaProperty(object);this.generateSelfSwitchKey(object.id);for(const name of nameList){if(meta.hasOwnProperty(name)){return this.convertVariables(meta[name],object)}}}static findMetaObject(object,nameList){if(!Array.isArray(nameList)){nameList=[nameList]}const meta=this.findMetaProperty(object);this.generateSelfSwitchKey(object.id);for(const name of nameList){if(meta.hasOwnProperty(name)){return new PluginParam(meta[name])}}}static findMetaProperty(object){const meta=object.meta;if(!meta){throw new Error(`Meta property not found : ${object}`)}return meta}static findPluginName(currentScript){return currentScript.src.replace(/^.*\/(.*).js$/,(function(){return arguments[1]}))}static registerCommand(currentScript,commandName,funcName){const pluginName=this.findPluginName(currentScript);const key=pluginName+":"+commandName;const func=typeof funcName==="function"?funcName:Game_Interpreter.prototype[funcName];if(!func){throw new Error(`Not found function Game_Interpreter : ${funcName}`)}PluginManager.registerCommand(pluginName,commandName,(function(args){func.call(this,PluginManagerEx.createCommandArgs(args,key))}))}static isExistPlugin(pluginName){return Object.keys(PluginManager.parameters(pluginName)).length>0}static generateSelfSwitchKey(eventId){if(!$gameMap){return}this._selfSwitchKey=[$gameMap.mapId(),eventId,null]}static findClassName(object){const define=object.constructor.toString();if(define.match(/^class/)){return define.replace(/class\s+(.*?)\s+[\s\S]*/m,"$1")}return define.replace(/function\s+(.*)\s*\([\s\S]*/m,"$1")}static throwError(message,currentScript){const pluginName=this.findPluginName(currentScript);throw new Error(`By ${pluginName} : ${message}`)}static escapeXmlTag(text){text=text.replace(/&gt;?/gi,">");return text.replace(/&lt;?/gi,"<")}}window.PluginManagerEx=PluginManagerEx;class TextConverter{static convertEscapeCharactersBase(text,data=null){text=text.replace(/\\/g,"");text=text.replace(/\x1b\x1b/g,"\\");text=text.replace(/\x1bV\[(\d+)]/gi,((_,p1)=>$gameVariables?$gameVariables.value(parseInt(p1)):""));text=text.replace(/\x1bV\[(\d+)]/gi,((_,p1)=>$gameVariables?$gameVariables.value(parseInt(p1)):""));text=text.replace(/\x1bN\[(\d+)]/gi,((_,p1)=>this.actorName(parseInt(p1))));text=text.replace(/\x1bP\[(\d+)]/gi,((_,p1)=>this.partyMemberName(parseInt(p1))));if($dataSystem){text=text.replace(/\x1bG/gi,TextManager.currencyUnit)}return text}static actorName(n){const actor=n>=1&&$gameActors?$gameActors.actor(n):null;return actor?actor.name():""}static partyMemberName(n){const actor=n>=1&&$gameParty?$gameParty.members()[n-1]:null;return actor?actor.name():""}}const _PluginManager_callCommand=PluginManager.callCommand;PluginManager.callCommand=function(self,pluginName,commandName,args){PluginManagerEx.generateSelfSwitchKey(self.eventId());_PluginManager_callCommand.apply(this,arguments)};const _Window_Base_convertEscapeCharacters=Window_Base.prototype.convertEscapeCharacters;Window_Base.prototype.convertEscapeCharacters=function(text){text=_Window_Base_convertEscapeCharacters.apply(this,arguments);return PluginManagerEx.convertEscapeCharacters(text)};const _Game_System_onAfterLoad=Game_System.prototype.onAfterLoad;Game_System.prototype.onAfterLoad=function(){_Game_System_onAfterLoad.apply(this,arguments);$gameMap.initDynamicEvents()};const _Game_Map_setupEvents=Game_Map.prototype.setupEvents;Game_Map.prototype.setupEvents=function(){_Game_Map_setupEvents.apply(this,arguments);this.initDynamicEvents()};Game_Map.prototype.initDynamicEvents=function(){if(!this._dynamicEvents){this._dynamicEvents=[]}};Game_Map.prototype.isInterpreterOf=function(interpreter){return this._interpreter===interpreter};Game_Map.prototype.setupDynamicCommon=function(id){const event=$dataCommonEvents[id];if(event){this.setupDynamicInterpreter(event.list)}};Game_Map.prototype.setupDynamicInterpreter=function(list){const interpreter=new Game_Interpreter;interpreter.setup(list,0);this._dynamicEvents.push(interpreter);this._dynamicEvents=this._dynamicEvents.filter((interpreter=>interpreter.isRunning()))};const _Game_Map_updateEvents=Game_Map.prototype.updateEvents;Game_Map.prototype.updateEvents=function(){_Game_Map_updateEvents.apply(this,arguments);this._dynamicEvents.forEach((interpreter=>interpreter.update()))};Game_Event.prototype.findMeta=function(metaNames){return PluginManagerEx.findMetaValue(this.event(),metaNames)};const _Game_Interpreter_setup=Game_Interpreter.prototype.setup;Game_Interpreter.prototype.setup=function(list,eventId){_Game_Interpreter_setup.apply(this,arguments);if(eventId){PluginManagerEx.generateSelfSwitchKey(eventId)}}})();